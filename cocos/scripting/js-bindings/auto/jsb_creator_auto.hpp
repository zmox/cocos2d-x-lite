#pragma once
#include "base/ccConfig.h"

#include "cocos/scripting/js-bindings/jswrapper/SeApi.h"

extern se::Object* __jsb_creator_Scale9SpriteV2_proto;
extern se::Class* __jsb_creator_Scale9SpriteV2_class;

bool js_register_creator_Scale9SpriteV2(se::Object* obj);
bool register_all_creator(se::Object* obj);
SE_DECLARE_FUNC(js_creator_Scale9SpriteV2_setTexture);
SE_DECLARE_FUNC(js_creator_Scale9SpriteV2_getFillType);
SE_DECLARE_FUNC(js_creator_Scale9SpriteV2_isTrimmedContentSizeEnabled);
SE_DECLARE_FUNC(js_creator_Scale9SpriteV2_getState);
SE_DECLARE_FUNC(js_creator_Scale9SpriteV2_setState);
SE_DECLARE_FUNC(js_creator_Scale9SpriteV2_setInsetBottom);
SE_DECLARE_FUNC(js_creator_Scale9SpriteV2_setFillRange);
SE_DECLARE_FUNC(js_creator_Scale9SpriteV2_getFillStart);
SE_DECLARE_FUNC(js_creator_Scale9SpriteV2_getFillRange);
SE_DECLARE_FUNC(js_creator_Scale9SpriteV2_setInsetTop);
SE_DECLARE_FUNC(js_creator_Scale9SpriteV2_setRenderingType);
SE_DECLARE_FUNC(js_creator_Scale9SpriteV2_setDistortionOffset);
SE_DECLARE_FUNC(js_creator_Scale9SpriteV2_setFillCenter);
SE_DECLARE_FUNC(js_creator_Scale9SpriteV2_setSpriteFrame);
SE_DECLARE_FUNC(js_creator_Scale9SpriteV2_getBlendFunc);
SE_DECLARE_FUNC(js_creator_Scale9SpriteV2_initWithTexture);
SE_DECLARE_FUNC(js_creator_Scale9SpriteV2_getInsetLeft);
SE_DECLARE_FUNC(js_creator_Scale9SpriteV2_getInsetBottom);
SE_DECLARE_FUNC(js_creator_Scale9SpriteV2_setDistortionTiling);
SE_DECLARE_FUNC(js_creator_Scale9SpriteV2_getRenderingType);
SE_DECLARE_FUNC(js_creator_Scale9SpriteV2_setFillStart);
SE_DECLARE_FUNC(js_creator_Scale9SpriteV2_getInsetRight);
SE_DECLARE_FUNC(js_creator_Scale9SpriteV2_setBlendFunc);
SE_DECLARE_FUNC(js_creator_Scale9SpriteV2_getFillCenter);
SE_DECLARE_FUNC(js_creator_Scale9SpriteV2_getInsetTop);
SE_DECLARE_FUNC(js_creator_Scale9SpriteV2_setInsetLeft);
SE_DECLARE_FUNC(js_creator_Scale9SpriteV2_initWithSpriteFrame);
SE_DECLARE_FUNC(js_creator_Scale9SpriteV2_setFillType);
SE_DECLARE_FUNC(js_creator_Scale9SpriteV2_setInsetRight);
SE_DECLARE_FUNC(js_creator_Scale9SpriteV2_enableTrimmedContentSize);
SE_DECLARE_FUNC(js_creator_Scale9SpriteV2_Scale9SpriteV2);

extern se::Object* __jsb_creator_GraphicsNode_proto;
extern se::Class* __jsb_creator_GraphicsNode_class;

bool js_register_creator_GraphicsNode(se::Object* obj);
bool register_all_creator(se::Object* obj);
SE_DECLARE_FUNC(js_creator_GraphicsNode_quadraticCurveTo);
SE_DECLARE_FUNC(js_creator_GraphicsNode_moveTo);
SE_DECLARE_FUNC(js_creator_GraphicsNode_lineTo);
SE_DECLARE_FUNC(js_creator_GraphicsNode_stroke);
SE_DECLARE_FUNC(js_creator_GraphicsNode_arc);
SE_DECLARE_FUNC(js_creator_GraphicsNode_setLineJoin);
SE_DECLARE_FUNC(js_creator_GraphicsNode_close);
SE_DECLARE_FUNC(js_creator_GraphicsNode_ellipse);
SE_DECLARE_FUNC(js_creator_GraphicsNode_setLineWidth);
SE_DECLARE_FUNC(js_creator_GraphicsNode_fill);
SE_DECLARE_FUNC(js_creator_GraphicsNode_getStrokeColor);
SE_DECLARE_FUNC(js_creator_GraphicsNode_setLineCap);
SE_DECLARE_FUNC(js_creator_GraphicsNode_circle);
SE_DECLARE_FUNC(js_creator_GraphicsNode_roundRect);
SE_DECLARE_FUNC(js_creator_GraphicsNode_draw);
SE_DECLARE_FUNC(js_creator_GraphicsNode_bezierCurveTo);
SE_DECLARE_FUNC(js_creator_GraphicsNode_arcTo);
SE_DECLARE_FUNC(js_creator_GraphicsNode_fillRect);
SE_DECLARE_FUNC(js_creator_GraphicsNode_onDraw);
SE_DECLARE_FUNC(js_creator_GraphicsNode_setFillColor);
SE_DECLARE_FUNC(js_creator_GraphicsNode_getFillColor);
SE_DECLARE_FUNC(js_creator_GraphicsNode_beginPath);
SE_DECLARE_FUNC(js_creator_GraphicsNode_setDeviceRatio);
SE_DECLARE_FUNC(js_creator_GraphicsNode_rect);
SE_DECLARE_FUNC(js_creator_GraphicsNode_getMiterLimit);
SE_DECLARE_FUNC(js_creator_GraphicsNode_getLineJoin);
SE_DECLARE_FUNC(js_creator_GraphicsNode_getLineCap);
SE_DECLARE_FUNC(js_creator_GraphicsNode_setMiterLimit);
SE_DECLARE_FUNC(js_creator_GraphicsNode_clear);
SE_DECLARE_FUNC(js_creator_GraphicsNode_getDeviceRatio);
SE_DECLARE_FUNC(js_creator_GraphicsNode_getLineWidth);
SE_DECLARE_FUNC(js_creator_GraphicsNode_setStrokeColor);
SE_DECLARE_FUNC(js_creator_GraphicsNode_create);
SE_DECLARE_FUNC(js_creator_GraphicsNode_GraphicsNode);

extern se::Object* __jsb_creator_PhysicsDebugDraw_proto;
extern se::Class* __jsb_creator_PhysicsDebugDraw_class;

bool js_register_creator_PhysicsDebugDraw(se::Object* obj);
bool register_all_creator(se::Object* obj);
SE_DECLARE_FUNC(js_creator_PhysicsDebugDraw_getDrawer);
SE_DECLARE_FUNC(js_creator_PhysicsDebugDraw_ClearDraw);
SE_DECLARE_FUNC(js_creator_PhysicsDebugDraw_AddDrawerToNode);
SE_DECLARE_FUNC(js_creator_PhysicsDebugDraw_PhysicsDebugDraw);

extern se::Object* __jsb_creator_PhysicsWorldManifoldWrapper_proto;
extern se::Class* __jsb_creator_PhysicsWorldManifoldWrapper_class;

bool js_register_creator_PhysicsWorldManifoldWrapper(se::Object* obj);
bool register_all_creator(se::Object* obj);
SE_DECLARE_FUNC(js_creator_PhysicsWorldManifoldWrapper_getSeparation);
SE_DECLARE_FUNC(js_creator_PhysicsWorldManifoldWrapper_getX);
SE_DECLARE_FUNC(js_creator_PhysicsWorldManifoldWrapper_getY);
SE_DECLARE_FUNC(js_creator_PhysicsWorldManifoldWrapper_getCount);
SE_DECLARE_FUNC(js_creator_PhysicsWorldManifoldWrapper_getNormalY);
SE_DECLARE_FUNC(js_creator_PhysicsWorldManifoldWrapper_getNormalX);
SE_DECLARE_FUNC(js_creator_PhysicsWorldManifoldWrapper_PhysicsWorldManifoldWrapper);

extern se::Object* __jsb_creator_PhysicsManifoldWrapper_proto;
extern se::Class* __jsb_creator_PhysicsManifoldWrapper_class;

bool js_register_creator_PhysicsManifoldWrapper(se::Object* obj);
bool register_all_creator(se::Object* obj);
SE_DECLARE_FUNC(js_creator_PhysicsManifoldWrapper_getNormalImpulse);
SE_DECLARE_FUNC(js_creator_PhysicsManifoldWrapper_getLocalNormalY);
SE_DECLARE_FUNC(js_creator_PhysicsManifoldWrapper_getLocalNormalX);
SE_DECLARE_FUNC(js_creator_PhysicsManifoldWrapper_getLocalPointY);
SE_DECLARE_FUNC(js_creator_PhysicsManifoldWrapper_getLocalPointX);
SE_DECLARE_FUNC(js_creator_PhysicsManifoldWrapper_getType);
SE_DECLARE_FUNC(js_creator_PhysicsManifoldWrapper_getX);
SE_DECLARE_FUNC(js_creator_PhysicsManifoldWrapper_getY);
SE_DECLARE_FUNC(js_creator_PhysicsManifoldWrapper_getTangentImpulse);
SE_DECLARE_FUNC(js_creator_PhysicsManifoldWrapper_getCount);
SE_DECLARE_FUNC(js_creator_PhysicsManifoldWrapper_PhysicsManifoldWrapper);

extern se::Object* __jsb_creator_PhysicsUtils_proto;
extern se::Class* __jsb_creator_PhysicsUtils_class;

bool js_register_creator_PhysicsUtils(se::Object* obj);
bool register_all_creator(se::Object* obj);
SE_DECLARE_FUNC(js_creator_PhysicsUtils_addB2Body);
SE_DECLARE_FUNC(js_creator_PhysicsUtils_syncNode);
SE_DECLARE_FUNC(js_creator_PhysicsUtils_removeB2Body);
SE_DECLARE_FUNC(js_creator_PhysicsUtils_getContactManifoldWrapper);
SE_DECLARE_FUNC(js_creator_PhysicsUtils_getContactWorldManifoldWrapper);
SE_DECLARE_FUNC(js_creator_PhysicsUtils_PhysicsUtils);

extern se::Object* __jsb_creator_PhysicsContactImpulse_proto;
extern se::Class* __jsb_creator_PhysicsContactImpulse_class;

bool js_register_creator_PhysicsContactImpulse(se::Object* obj);
bool register_all_creator(se::Object* obj);
SE_DECLARE_FUNC(js_creator_PhysicsContactImpulse_getCount);
SE_DECLARE_FUNC(js_creator_PhysicsContactImpulse_getNormalImpulse);
SE_DECLARE_FUNC(js_creator_PhysicsContactImpulse_getTangentImpulse);
SE_DECLARE_FUNC(js_creator_PhysicsContactImpulse_PhysicsContactImpulse);

extern se::Object* __jsb_creator_PhysicsContactListener_proto;
extern se::Class* __jsb_creator_PhysicsContactListener_class;

bool js_register_creator_PhysicsContactListener(se::Object* obj);
bool register_all_creator(se::Object* obj);
SE_DECLARE_FUNC(js_creator_PhysicsContactListener_unregisterContactFixture);
SE_DECLARE_FUNC(js_creator_PhysicsContactListener_registerContactFixture);
SE_DECLARE_FUNC(js_creator_PhysicsContactListener_PhysicsContactListener);

extern se::Object* __jsb_creator_PhysicsAABBQueryCallback_proto;
extern se::Class* __jsb_creator_PhysicsAABBQueryCallback_class;

bool js_register_creator_PhysicsAABBQueryCallback(se::Object* obj);
bool register_all_creator(se::Object* obj);
SE_DECLARE_FUNC(js_creator_PhysicsAABBQueryCallback_init);
SE_DECLARE_FUNC(js_creator_PhysicsAABBQueryCallback_getFixture);
SE_DECLARE_FUNC(js_creator_PhysicsAABBQueryCallback_PhysicsAABBQueryCallback);

extern se::Object* __jsb_creator_PhysicsRayCastCallback_proto;
extern se::Class* __jsb_creator_PhysicsRayCastCallback_class;

bool js_register_creator_PhysicsRayCastCallback(se::Object* obj);
bool register_all_creator(se::Object* obj);
SE_DECLARE_FUNC(js_creator_PhysicsRayCastCallback_getType);
SE_DECLARE_FUNC(js_creator_PhysicsRayCastCallback_init);
SE_DECLARE_FUNC(js_creator_PhysicsRayCastCallback_getFractions);
SE_DECLARE_FUNC(js_creator_PhysicsRayCastCallback_PhysicsRayCastCallback);

extern se::Object* __jsb_creator_CameraNode_proto;
extern se::Class* __jsb_creator_CameraNode_class;

bool js_register_creator_CameraNode(se::Object* obj);
bool register_all_creator(se::Object* obj);
SE_DECLARE_FUNC(js_creator_CameraNode_removeTarget);
SE_DECLARE_FUNC(js_creator_CameraNode_setTransform);
SE_DECLARE_FUNC(js_creator_CameraNode_getVisibleRect);
SE_DECLARE_FUNC(js_creator_CameraNode_containsNode);
SE_DECLARE_FUNC(js_creator_CameraNode_addTarget);
SE_DECLARE_FUNC(js_creator_CameraNode_getInstance);
SE_DECLARE_FUNC(js_creator_CameraNode_CameraNode);

